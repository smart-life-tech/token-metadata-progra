{
    "sourceFile": "mpl/main.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1656584169075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1656585078930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n         payer: myKeypair.publicKey,\r\n         updateAuthority: myKeypair.publicKey,\r\n     }\r\n     const dataV2 = {\r\n-        name: \"Agrichainx Tribe\",\r\n-        symbol: \"AGXT\",\r\n-        uri: \"logo url link\",\r\n+        name: \" Your Token Name\",\r\n+        symbol: \" Your Token Symbol\",\r\n+        uri: \"Image Url upload\",\r\n         // we don't need that\r\n         sellerFeeBasisPoints: 0,\r\n         creators: null,\r\n         collection: null,\r\n"
                }
            ],
            "date": 1656584169075,
            "name": "Commit-0",
            "content": "\r\nimport * as mpl from \"@metaplex-foundation/mpl-token-metadata\";\r\nimport * as web3 from \"@solana/web3.js\";\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nexport function loadWalletKey(keypairFile:string): web3.Keypair {\r\n    const fs = require(\"fs\");\r\n    const loaded = web3.Keypair.fromSecretKey(\r\n      new Uint8Array(JSON.parse(fs.readFileSync(keypairFile).toString())),\r\n    );\r\n    return loaded;\r\n  }\r\n\r\nconst INITIALIZE = false;\r\n\r\nasync function main(){\r\n    console.log(\"let's name some tokens!\");\r\n    const myKeypair = loadWalletKey(\"Your Keypair\");\r\n    const mint = new web3.PublicKey(\"Your Token Address\");\r\n    const seed1 = Buffer.from(anchor.utils.bytes.utf8.encode(\"metadata\"));\r\n    const seed2 = Buffer.from(mpl.PROGRAM_ID.toBytes());\r\n    const seed3 = Buffer.from(mint.toBytes());\r\n    const [metadataPDA, _bump] = web3.PublicKey.findProgramAddressSync([seed1, seed2, seed3], mpl.PROGRAM_ID);\r\n    const accounts = {\r\n        metadata: metadataPDA,\r\n        mint,\r\n        mintAuthority: myKeypair.publicKey,\r\n        payer: myKeypair.publicKey,\r\n        updateAuthority: myKeypair.publicKey,\r\n    }\r\n    const dataV2 = {\r\n        name: \"Agrichainx Tribe\",\r\n        symbol: \"AGXT\",\r\n        uri: \"logo url link\",\r\n        // we don't need that\r\n        sellerFeeBasisPoints: 0,\r\n        creators: null,\r\n        collection: null,\r\n        uses: null\r\n    }\r\n    let ix;\r\n    if (INITIALIZE) {\r\n        const args =  {\r\n            createMetadataAccountArgsV2: {\r\n                data: dataV2,\r\n                isMutable: true\r\n            }\r\n        };\r\n        ix = mpl.createCreateMetadataAccountV2Instruction(accounts, args);\r\n    } else {\r\n        const args =  {\r\n            updateMetadataAccountArgsV2: {\r\n                data: dataV2,\r\n                isMutable: true,\r\n                updateAuthority: myKeypair.publicKey,\r\n                primarySaleHappened: true\r\n            }\r\n        };\r\n        ix = mpl.createUpdateMetadataAccountV2Instruction(accounts, args)\r\n    }\r\n    const tx = new web3.Transaction();\r\n    tx.add(ix);\r\n    const connection = new web3.Connection(\"https://api.mainnet-beta.solana.com\");\r\n    const txid = await web3.sendAndConfirmTransaction(connection, tx, [myKeypair]);\r\n    console.log(txid);\r\n\r\n}\r\n\r\nmain();"
        }
    ]
}